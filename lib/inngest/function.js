import { db } from "@/lib/prisma";
import { inngest } from "./client";

import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

export const generateIndustryInsights = inngest.createFunction( // Innngest automatically runs this function every week using the cron expression
  { name: "Generate Industry Insights" },
  { cron: "0 0 * * 0" }, // Run every Sunday at midnight , cron expression have 5 fields: minute, hour, day of month, month, day of week that specifies 
  // when the function should run
  async ({ event, step }) => { // step is used to run a step in the function, it can be used to run a function, query, or any other operation
    const industries = await step.run("Fetch industries", async () => { // here we are fetching all industries from the database
      // This query fetches all unique industries from the IndustryInsight table, here the step is used to run a query to the database with name fetchIndustries
      // this name is used to identify the step in the logs
      return await db.industryInsight.findMany({
        select: { industry: true },
      });
    });

    for (const { industry } of industries) { // for each industry, we will generate insights for that industry using the gemini model
      const prompt = `
          Analyze the current state of the ${industry} industry and provide insights in ONLY the following JSON format without any additional notes or explanations:
          {
            "salaryRanges": [
              { "role": "string", "min": number, "max": number, "median": number, "location": "string" }
            ],
            "growthRate": number,
            "demandLevel": "High" | "Medium" | "Low",
            "topSkills": ["skill1", "skill2"],
            "marketOutlook": "Positive" | "Neutral" | "Negative",
            "keyTrends": ["trend1", "trend2"],
            "recommendedSkills": ["skill1", "skill2"]
          }
          
          IMPORTANT: Return ONLY the JSON. No additional text, notes, or markdown formatting.
          Include at least 5 common roles for salary ranges.
          Growth rate should be a percentage.
          Include at least 5 skills and trends.
        `;

      const res = await step.ai.wrap( // this step is used to run the AI model with the prompt and get the response , ai.wrap is used to wrap the AI model call
        // it takes the name of the step, the functio to run i.e generateContent, the prompt to run , this fn is given by inngest
        // These fn helps to monitor the progress of the function and also helps to retry the function if it fails and also helps to log the progress of the function
        "gemini",
        async (p) => { // p is the parameters passed to the function, it contains the prompt and other parameters passed automatically by ai.wrap
          return await model.generateContent(p);
        },
        prompt
      );

      const text = res.response.candidates[0].content.parts[0].text || ""; //cleaning the response
      const cleanedText = text.replace(/```(?:json)?\n?/g, "").trim(); // removing any code block formatting and trimming whitespace

      const insights = JSON.parse(cleanedText); // parsing the cleaned text to JSON

      await step.run(`Update ${industry} insights`, async () => { // this step is used to update the industry insights in the database
        await db.industryInsight.update({ // updating the industry insights table where the industry matches the current industry and data is the 
        // insights generated by the AI model, lastUpdated is set to current date and nextUpdate is set to one week from now
          where: { industry },
          data: {
            ...insights,
            lastUpdated: new Date(),
            nextUpdate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
          },
        });
      });
    }
  }
);
// steps are useful to break down the function into smaller parts, making it easier to debug and monitor the progress of the function